<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mod.loan.mapper.ReportOrderLoanMapper">
<resultMap id="BaseResultMap" type="com.mod.loan.model.ReportOrderLoan">
    <!--
      WARNING - @mbg.generated
    -->
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="day_key" jdbcType="DATE" property="dayKey" />
    <result column="merchant" jdbcType="VARCHAR" property="merchant" />
    <result column="arrive_cnt" jdbcType="INTEGER" property="arriveCnt" />
    <result column="arrive_amount" jdbcType="DECIMAL" property="arriveAmount" />
    <result column="first_cnt" jdbcType="INTEGER" property="firstCnt" />
    <result column="first_amount" jdbcType="DECIMAL" property="firstAmount" />
    <result column="second_cnt" jdbcType="INTEGER" property="secondCnt" />
    <result column="second_amount" jdbcType="DECIMAL" property="secondAmount" />
    <result column="old_cnt" jdbcType="INTEGER" property="oldCnt" />
    <result column="old_amount" jdbcType="DECIMAL" property="oldAmount" />
    <result column="total_fee" jdbcType="DECIMAL" property="totalFee" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
	<select id="reportOrderLoanCount" resultType="int">
		select count(DISTINCT(DATE(arrive_time))) from tb_order
			<where>
				<if test="merchant != null">
					and merchant = #{merchant}
				</if>
				<if test="startTime != null">
					and DATE(arrive_time) &gt;= #{startTime}
				</if>
				<if test="endTime != null">
					and DATE(arrive_time) &lt;= #{endTime}
				</if>
			</where>
	</select>
	
	<select id="findReportOrderLoanList" resultType="map">
		SELECT
		a.create_time AS 'dayKey',
		a.loanOrderCount,
		a.loanMoney,
		b.extendOrderCount,
		a.newUserLoanOrderCount,
		a.newUserBorrowMoney,
		a.newUserOrderRate,
		a.oldUserLoanOrderCount,
		a.oldUserBorrowMoney,
		a.oldUserOrderRate,
		a.omnibusFee
		FROM
		(
		SELECT
		DATE(o.arrive_time) AS 'create_time',
		o.merchant,
		count(o.id) AS 'loanOrderCount',
		sum(o.actual_money) AS 'loanMoney',
		count(CASE WHEN o.user_type &lt; 3 THEN o.id ELSE NULL END) AS 'newUserLoanOrderCount',
		sum(CASE WHEN o.user_type &lt; 3 THEN o.borrow_money ELSE 0 END) AS 'newUserBorrowMoney',
		concat(ROUND(count(CASE WHEN o.user_type &lt; 3 THEN o.id ELSE NULL END) / count(o.id) * 100,2),'%') AS 'newUserOrderRate',
		count(CASE WHEN o.user_type = 3 THEN o.id ELSE NULL END) AS 'oldUserLoanOrderCount',
		sum(CASE WHEN o.user_type = 3 THEN o.borrow_money ELSE 0 END) AS 'oldUserBorrowMoney',
		concat(ROUND(count(CASE WHEN o.user_type = 3 THEN o.id ELSE NULL END) / count(o.id) * 100,2),'%') AS 'oldUserOrderRate',
		sum(o.total_fee) AS 'omnibusFee'
		FROM
		tb_order o
		<where>
			and o.arrive_time is not null
			<if test="startTime != null">
				and DATE(o.arrive_time) &gt;= #{startTime}
			</if>
			<if test="endTime != null">
				and DATE(o.arrive_time) &lt;= #{endTime}
			</if>
		</where>
		GROUP BY
		1,2) a
		LEFT JOIN (
		SELECT
		DATE(od.create_time) AS 'create_time',
		od.merchant,
		count(od.id) AS 'extendOrderCount'
		FROM
		tb_order_defer od
		<where>
			<if test="startTime != null">
				and DATE(od.create_time) &gt;= #{startTime}
			</if>
			<if test="endTime != null">
				and DATE(od.create_time) &lt;= #{endTime}
			</if>
		</where>
		GROUP BY
		1,2) b
		ON (a.merchant = b.merchant AND a.create_time = b.create_time)
		<where>
			<if test="merchant != null">
				and a.merchant = #{merchant}
			</if>
		</where>
		ORDER BY
		a.create_time DESC
		limit #{startIndex},#{pageSize}
	</select>
	
	<select id="exportReport" resultType="map">
		SELECT
		a.create_time AS 'dayKey',
		a.loanOrderCount,
		a.loanMoney,
		b.extendOrderCount,
		a.newUserLoanOrderCount,
		a.newUserBorrowMoney,
		a.newUserOrderRate,
		a.oldUserLoanOrderCount,
		a.oldUserBorrowMoney,
		a.oldUserOrderRate,
		a.omnibusFee
		FROM
		(
		SELECT
		DATE(o.arrive_time) AS 'create_time',
		o.merchant,
		count(o.id) AS 'loanOrderCount',
		sum(o.actual_money) AS 'loanMoney',
		count(CASE WHEN o.user_type &lt; 3 THEN o.id ELSE NULL END) AS 'newUserLoanOrderCount',
		sum(CASE WHEN o.user_type &lt; 3 THEN o.borrow_money ELSE 0 END) AS 'newUserBorrowMoney',
		concat(ROUND(count(CASE WHEN o.user_type &lt; 3 THEN o.id ELSE NULL END) / count(o.id) * 100,2),'%') AS 'newUserOrderRate',
		count(CASE WHEN o.user_type = 3 THEN o.id ELSE NULL END) AS 'oldUserLoanOrderCount',
		sum(CASE WHEN o.user_type = 3 THEN o.borrow_money ELSE 0 END) AS 'oldUserBorrowMoney',
		concat(ROUND(count(CASE WHEN o.user_type = 3 THEN o.id ELSE NULL END) / count(o.id) * 100,2),'%') AS 'oldUserOrderRate',
		sum(o.total_fee) AS 'omnibusFee'
		FROM
		tb_order o
		<where>
			and o.arrive_time is not null
			<if test="startTime != null">
				and DATE(o.arrive_time) &gt;= #{startTime}
			</if>
			<if test="endTime != null">
				and DATE(o.arrive_time) &lt;= #{endTime}
			</if>
		</where>
		GROUP BY
		1,2) a
		LEFT JOIN (
		SELECT
		DATE(od.create_time) AS 'create_time',
		od.merchant,
		count(od.id) AS 'extendOrderCount'
		FROM
		tb_order_defer od
		<where>
			<if test="startTime != null">
				and DATE(od.create_time) &gt;= #{startTime}
			</if>
			<if test="endTime != null">
				and DATE(od.create_time) &lt;= #{endTime}
			</if>
		</where>
		GROUP BY
		1,2) b
		ON (a.merchant = b.merchant AND a.create_time = b.create_time)
		<where>
			<if test="merchant != null">
				and a.merchant = #{merchant}
			</if>
		</where>
		ORDER BY
		a.create_time DESC
	</select>
	
</mapper>