<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mod.loan.mapper.ReportOrderRepayMapper">
  <resultMap id="BaseResultMap" type="com.mod.loan.model.ReportOrderRepay">
    <!--
      WARNING - @mbg.generated
    -->
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="day_key" jdbcType="DATE" property="dayKey" />
    <result column="merchant" jdbcType="VARCHAR" property="merchant" />
    <result column="should_repay_cnt" jdbcType="INTEGER" property="shouldRepayCnt" />
    <result column="early_repay_cnt" jdbcType="INTEGER" property="earlyRepayCnt" />
    <result column="normal_repay_cnt" jdbcType="INTEGER" property="normalRepayCnt" />
    <result column="overdue_repay_cnt" jdbcType="INTEGER" property="overdueRepayCnt" />
    <result column="overdue_cnt" jdbcType="INTEGER" property="overdueCnt" />
    <result column="bad_cnt" jdbcType="INTEGER" property="badCnt" />
    <result column="overdue1_repay_cnt" jdbcType="INTEGER" property="overdue1RepayCnt" />
    <result column="overdue3_repay_cnt" jdbcType="INTEGER" property="overdue3RepayCnt" />
    <result column="overdue7_repay_cnt" jdbcType="INTEGER" property="overdue7RepayCnt" />
    <result column="overdue15_repay_cnt" jdbcType="INTEGER" property="overdue15RepayCnt" />
    <result column="repay_amount" jdbcType="DECIMAL" property="repayAmount" />
    <result column="real_repay_amount" jdbcType="DECIMAL" property="realRepayAmount" />
    <result column="pay_amount" jdbcType="DECIMAL" property="payAmount" />
    <result column="overdue_fee" jdbcType="DECIMAL" property="overdueFee" />
    <result column="reduce_money" jdbcType="DECIMAL" property="reduceMoney" />
    <result column="overdue_repay_amount" jdbcType="DECIMAL" property="overdueRepayAmount" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
	
	<select id="reportOrderRepayCount" resultType="int">
		select count(DISTINCT(DATE(repay_time))) from tb_order
		<where>
			<if test="merchant != null">
				and merchant = #{merchant}
			</if>
			<if test="startTime != null">
				and DATE(repay_time) &gt;= #{startTime}
			</if>
			<if test="endTime != null">
				and DATE(repay_time) &lt;= #{endTime}
			</if>
		</where>
	</select>
	
	<select id="findReportOrderRepayList" resultType="map">
		SELECT
		a.create_time AS 'dayKey',
		a.shouldRepayMoney,
		a.shouldRepayOrderCount,
		ifnull(b.realRepayMoney,0) AS 'realRepayMoney',
		ifnull(b.realRepayOrderCount,0) AS 'realRepayOrderCount',
		(a.shouldRepayMoney - ifnull(b.realRepayMoney,0)) AS 'notRepayMoney',
		(a.shouldRepayOrderCount - ifnull(b.realRepayOrderCount,0)) AS 'notRepayOrderCount',
        ifnull(concat(ROUND(b.realRepayOrderCount / a.shouldRepayOrderCount * 100,2),'%'),'0.00%') AS 'repayRate'
		FROM
		(
		SELECT
		DATE(o.repay_time) AS 'create_time',
		sum(o.borrow_money) AS 'shouldRepayMoney',
		count(o.id) AS 'shouldRepayOrderCount'
		FROM
		tb_order o
		<where>
			and o.repay_time is not null
			<if test="merchant != null">
				and o.merchant = #{merchant}
			</if>
			<if test="startTime != null">
				and DATE(o.repay_time) &gt;= #{startTime}
			</if>
			<if test="endTime != null">
				and DATE(o.repay_time) &lt;= #{endTime}
			</if>
		</where>
		GROUP BY
		1) a
		LEFT JOIN (
		SELECT
		DATE(od.update_time) AS 'create_time',
		sum(od.repay_money) AS 'realRepayMoney',
		count(DISTINCT od.order_id) AS 'realRepayOrderCount'
		FROM
		tb_order_repay od left join tb_order o2 on
		(od.order_id = o2.id and DATE(od.update_time) = DATE(o2.real_repay_time))
		<where>
			and DATE(o2.real_repay_time) = DATE(o2.repay_time)
			and od.repay_status = 3
			<if test="merchant != null">
				and o2.merchant = #{merchant}
			</if>
			<if test="startTime != null">
				and DATE(od.create_time) &gt;= #{startTime}
			</if>
			<if test="endTime != null">
				and DATE(od.create_time) &lt;= #{endTime}
			</if>
		</where>

		GROUP BY
		1) b
		ON (a.create_time = b.create_time)
		ORDER BY
		a.create_time DESC
		limit #{startIndex},#{pageSize}
	</select>
	
	<select id="exportReport" resultType="map">
		SELECT
		a.create_time AS 'dayKey',
		a.shouldRepayMoney,
		a.shouldRepayOrderCount,
		ifnull(b.realRepayMoney,0) AS 'realRepayMoney',
		ifnull(b.realRepayOrderCount,0) AS 'realRepayOrderCount',
		(a.shouldRepayMoney - ifnull(b.realRepayMoney,0)) AS 'notRepayMoney',
		(a.shouldRepayOrderCount - ifnull(b.realRepayOrderCount,0)) AS 'notRepayOrderCount',
        ifnull(concat(ROUND(b.realRepayOrderCount / a.shouldRepayOrderCount * 100,2),'%'),'0.00%') AS 'repayRate'
		FROM
		(
		SELECT
		DATE(o.repay_time) AS 'create_time',
		sum(o.borrow_money) AS 'shouldRepayMoney',
		count(o.id) AS 'shouldRepayOrderCount'
		FROM
		tb_order o
		<where>
			and o.repay_time is not null
			<if test="merchant != null">
				and o.merchant = #{merchant}
			</if>
			<if test="startTime != null">
				and DATE(o.repay_time) &gt;= #{startTime}
			</if>
			<if test="endTime != null">
				and DATE(o.repay_time) &lt;= #{endTime}
			</if>
		</where>
		GROUP BY
		1) a
		LEFT JOIN (
		SELECT
		DATE(od.update_time) AS 'create_time',
		sum(od.repay_money) AS 'realRepayMoney',
		count(DISTINCT od.order_id) AS 'realRepayOrderCount'
		FROM
		tb_order_repay od left join tb_order o2 on
		(od.order_id = o2.id and DATE(od.update_time) = DATE(o2.real_repay_time))
		<where>
			and DATE(o2.real_repay_time) = DATE(o2.repay_time)
			and od.repay_status = 3
			<if test="merchant != null">
				and o2.merchant = #{merchant}
			</if>
			<if test="startTime != null">
				and DATE(od.create_time) &gt;= #{startTime}
			</if>
			<if test="endTime != null">
				and DATE(od.create_time) &lt;= #{endTime}
			</if>
		</where>

		GROUP BY
		1) b
		ON (a.create_time = b.create_time)
		ORDER BY
		a.create_time DESC
	</select>

	<select id="oldUserRepayRate" resultType="map" statementType="CALLABLE">
		CALL OldUserRepayRate(#{merchant},#{userSource},#{userOrigin},#{startTime},#{endTime})
	</select>

	<select id="newUserRepayRate" resultType="map" statementType="CALLABLE">
		CALL NewUserRepayRate(#{merchant},#{userSource},#{userOrigin},#{startTime},#{endTime})
	</select>

	<select id="totalUserRepayRate" resultType="map" statementType="CALLABLE">
		CALL TotalUserRepayRate(#{merchant},#{userSource},#{userOrigin},#{startTime},#{endTime})
	</select>
</mapper>